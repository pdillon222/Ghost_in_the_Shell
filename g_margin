#!/bin/bash
#Gross margin program for input component prices
#program must run on MAC / BSD systems


#create arrays for value storage
item_name=()
item_price=()


function uppercase() {
    #translate a string into all uppercase letters (to minimize user input error)
    #BSD does not support parameter substitution
    echo "You have selected $1"
    word=$(echo $1 | sed 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/')
    echo $word
}

function booltest() {
    uppercase $1
    while [[ $word != "YES" && $word != "NO" ]];do
        read -p "Please input either 'yes' or 'no': " bool_prompt
        uppercase $bool_prompt
    done
    [[ $word =~ "NO" ]] && break || continue 
}

function runloops() {
    #function will prompt user for individual fixture names
    #function will aggregate costs for fixture subcomponents
    #function will append to an array of fixture names (item_name)
    #function will append costs to an array of aggragated costs (item_price)
    #arrays will map to each other (${item_name[0]}:${item_price[0]})
	while : ;do
	    item=1
	    prodprice=0
	    read -p "Please enter the name of the item: " fixture
	    item_name+=("$fixture")
		while : ;do
		    #acquire cost of first component
		    read -p "Please enter cost of component $item: " cost
		    [[ ! $cost =~ ^[0-9]*\.?[0-9]*$ ]] && echo "Cost must be a in integer format
Please try again" && continue
		    #acquire quantity of specified component 
		    read -p "Please enter quantity of component $item: " quant
		    while [[ ! $quant =~ ^[0-9]*\.?[0-9]*$ ]];do
			echo "Quantity must be in integer format 
Please try again"   
			read -p "Please enter quantity of item $item: " quant
		    done
		    
		    #calculate the total cost of the component
		    totprice=$(( cost * quant ))
		    echo "Price of component ${item} is \$$totprice"
		    
		    #since a fixture could have multiple components: 
		    #add the component price, to the master total price (prodprice) initialized outside of the loop
		    prodprice=$((totprice + prodprice))
		    ((++item))
		    
		    read -p "Are there more components associated with the fixture? {yes | no}: " comprompt
                    booltest $comprompt 
		    
		done 
            item_price+=("\$$prodprice")
	    read -p "Would you like to input costs for more fixtures? {yes | no}: " fixprompt
	    booltest $fixprompt
	
        done
}

runloops

function display_array() {
#display array values from name array, and associated value array
	item_counter=-1
	for i in ${item_name[@]}; do #changed from '*' to '@'
	    ((item_counter++))
	    echo "${item_name[$item_counter]}=${item_price[$item_counter]}"
	done
}

echo "Fixtures and associated costs are:"
display_array

#allow the user the ability to go back and edit the individual array values
read -p "Would you like to edit fixture costs?
{ yes (to edit) | no (to proceed with gross margin calculations) }: " proceed
uppercase $proceed

while [[ $word != "YES" && $word != "NO" ]];do
    read -p "Please input either 'yes' or 'no': " bool_prompt
    uppercase $bool_prompt
done

#######################################################################################################################
#create a loop to edit the array values
while [[ $word =~ "YES" ]];do
    #will run until $word has been changed to !=YES
    display_array
    echo "Which fixture's cost would you like to edit?"
    counter=-1
    for i in "${item_name[@]}";do
        ((counter++))
        echo "To select $i, Please enter $((counter+1))"
    done
    
    read -p "Please choose the fixture to edit: " fixture_edit
     
    #make sure the user inputs an integer, and that it is in the range of the array
    while [[ ! $fixture_edit =~ ^[0-9] ]];do
        read -p "To select a fixture, please enter it's numerical id: " fixture_edit
    done
    
    while [[ $fixture_edit > ${#item_name[*]} ]] || [[ $fixture_edit < 1 ]];do
        read -p "Chosen numerical id is out of range, pick another: " fixture_edit
            while [[ ! $fixture_edit =~ ^[0-9] ]];do
                read -p "To select a fixture, please enter it's numerical id: " fixture_edit
            done
    done
    echo ""
    echo "You have selected ${item_name[$((fixture_edit - 1))]}"
    echo ""
    echo ""
    array_index=$((fixture_edit - 1))
    echo "you will be editing the cost of ${item_name[$array_index]}, whose cost is ${item_price[$array_index]}"
    #remember that the loop must continue, because user has chosen to edit fixture costs
    read -p "Please enter the new fixture cost: " newcost
    while [[ ! $newcost =~ ^[0-9]*\.?[0-9]*$ ]];do
        echo "New fixture cost must be in integer format 
Please try again"   
        read -p "Please enter the new fixture cost of ${item_name[$array_index]}: " newcost
    done
    #update the array value to the new cost
    item_price[$array_index]="\$$newcost"

    read -p "Would you like to edit more fixture costs? {yes | no}: " edit_cost
    uppercase $edit_cost
    while [[ $word != "YES" && $word != "NO" ]];do
          read -p "Please input either 'yes' or 'no': " bool_prompt
          uppercase $bool_prompt
    done
    [[ $word = "NO" ]] && break
done

echo "The loop has been broken, fixture costs are finalized"

########################################################################################################################
#cost inputs have now been finalized

